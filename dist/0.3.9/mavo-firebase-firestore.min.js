(function($){"use strict";const PROVIDERS={google:{},facebook:{},twitter:{},github:{}},DEPRECATED={"mv-firebase-key":{attribute:"mv-storage-key",url:"https://plugins.mavo.io/plugin/firebase-firestore#setup-mavo-application"},"mv-firebase-auth":{attribute:"mv-storage-providers",url:"https://plugins.mavo.io/plugin/firebase-firestore#authentication-with-firebase-using-google-facebook-twitter-or-github-accounts"},"mv-firebase":{attribute:"mv-storage-options",url:"https://plugins.mavo.io/plugin/firebase-firestore#customization"},"mv-firebase-storage":{attribute:"mv-storage-bucketname",url:"https://plugins.mavo.io/plugin/firebase-firestore#customization"}};Mavo.Plugins.register("firebase-firestore",{dependencies:["https://cdn.jsdelivr.net/gh/DmitrySharabin/mavo-firebase-firestore/mavo-firebase-firestore.css"],hooks:{"init-start":function(a){Object.keys(PROVIDERS).forEach(b=>{const c=`firebase-auth-${b}`;Mavo.UI.Bar.controls[c]={create(b){return b||$.create("button",{type:"button",className:`mv-${c}`,textContent:a._(c)})},action(){a.primaryBackend.provider=b,a.primaryBackend.login(!1)},permission:"login",condition(){return!!a.primaryBackend.project&&a.primaryBackend.authProviders?.includes?.(b)}}}),$.extend(Mavo.UI.Bar.controls.login,{condition(){return!a.primaryBackend.project?a.primaryBackend.permissions.login:!a.primaryBackend.authProviders?.length}})}}});const _=Mavo.Backend.register($.Class({extends:Mavo.Backend,id:"Firebase",constructor(a,b){for(const c in this.permissions.on("read"),this.defaults={collection:"mavo-apps",filename:b.mavo.id,bucketName:b.bucketname||b.mavo.element.getAttribute("mv-firebase-storage")||b.mavo.id,features:{auth:!1,storage:!1,realtime:!1,"offline-persistence":!1,"all-can-write":!1,"all-can-edit":!1},authProviders:_.getAuthProviders(b.providers||b.mavo.element.getAttribute("mv-firebase-auth")||"",PROVIDERS),provider:void 0},$.extend(this,this.defaults),DEPRECATED)if(b.mavo.element.hasAttribute(c)){const a=DEPRECATED[c].attribute,b=DEPRECATED[c].url;Mavo.warn(`@${c} is deprecated. Please use @${a} instead. For details, see ${b}.`)}const c=b.options||b.mavo.element.getAttribute("mv-firebase")||"";this.features=_.getOptions(c,this.defaults.features),this.authProviders.length&&(this.features.auth=!0),this.features.auth?(this.permissions.on("login"),!this.authProviders.length&&(this.provider="google")):this.permissions.on(["edit","save"]),this.ready=$.load("https://www.gstatic.com/firebasejs/8.2.0/firebase-app.js").then(async()=>{await Promise.all([$.load("https://www.gstatic.com/firebasejs/8.2.0/firebase-firestore.js"),$.include(!this.features.storage,"https://www.gstatic.com/firebasejs/8.2.0/firebase-storage.js"),$.include(!this.features.auth,"https://www.gstatic.com/firebasejs/8.2.0/firebase-auth.js")]),$.extend(this,_.parseSource(this.source,this.defaults)),this.project=b.project??this.project,this.collection=b.collection??this.collection,this.filename=b.filename??this.filename;const a={apiKey:this.key??b.mavo.element.getAttribute("mv-firebase-key"),databaseURL:`https://${this.project}.firebaseio.com`,projectId:this.project,authDomain:`${this.project}.firebaseapp.com`,storageBucket:`${this.project}.appspot.com`};if(this.app=firebase.apps.length?firebase.apps.find(a=>a.options.projectId===this.project)||firebase.initializeApp(a,this.project):firebase.initializeApp(a),this.features["offline-persistence"])try{this.app.firestore().enablePersistence({synchronizeTabs:!0})}catch(a){"unimplemented"===a.code&&(Mavo.warn(this.mavo._("firebase-offline-persistence-unimplemented")),this.mavo.error(`Firebase Offline Persistence: ${a.message}`))}if(this.db=this.app.firestore().collection(this.collection),this.features.realtime?this.unsubscribe=this.db.doc(this.filename).onSnapshot(a=>_.updatesHandler(a,b.mavo),a=>b.mavo.error(`Firebase Realtime: ${a.message}`)):this.unsubscribe&&this.unsubscribe(),this.features.storage&&(this.storageBucketRef=this.app.storage().ref()),this.features.auth){const a=["login"];this.features["all-can-write"]&&a.push("save"),this.features["all-can-edit"]&&a.push("edit"),this.app.auth().onAuthStateChanged(c=>{c?(this.user={username:c.email,name:c.displayName,avatar:c.photoURL,info:c},$.fire(b.mavo.element,"mv-login",{backend:this}),this.permissions.off("login").on(["edit","save","logout"])):(this.user=null,$.fire(b.mavo.element,"mv-logout",{backend:this}),this.permissions.off(["edit","add","delete","save","logout"]).on(a))})}return Promise.resolve()})},update(a,b){this.super.update.call(this,a,b),$.extend(this,_.parseSource(this.source,this.defaults)),this.project=b.project??this.project,this.collection=b.collection??this.collection,this.filename=b.filename??this.filename,this.app&&(this.db=this.app.firestore().collection(this.collection),this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=this.db.doc(this.filename).onSnapshot(a=>_.updatesHandler(a,b.mavo),a=>b.mavo.error(`Firebase Realtime: ${a.message}`))))},async load(){this.features["offline-persistence"]&&!navigator.onLine&&setTimeout(()=>this.mavo.inProgress=!1,300),await this.ready;try{const a=await this.db.doc(this.filename).get();return a.data()||{}}catch(a){return Mavo.warn(this.mavo._("firebase-check-security-rules")),this.mavo.error(`Firebase Load Data: ${a.message}`),null}},put(a,b=this.path,c={}){return this.features["offline-persistence"]&&!navigator.onLine&&setTimeout(()=>this.mavo.inProgress=!1,300),c.isFile?this.storageBucketRef?this.storageBucketRef.child(b).put(a).then(a=>a.ref.getDownloadURL()):(Mavo.warn(this.mavo._("firebase-enable-storage")),Promise.reject(Error(`Firebase Storage: ${this.mavo._("firebase-enable-storage")}`))):this.db.doc(this.filename).set(JSON.parse(a)).then(()=>Promise.resolve()).catch(a=>{this.features.auth?Mavo.warn(this.mavo._("firebase-check-security-rules")):(Mavo.warn(this.mavo._("firebase-enable-auth")),Mavo.warn(this.mavo._("firebase-check-security-rules"))),this.mavo.error(`Firebase Auth: ${a.message}`)})},async upload(a,b){b=`${this.bucketName}/${b}`;try{const c=await this.put(a,b,{isFile:!0});return c}catch(a){return a.code&&(this.features.auth?Mavo.warn(this.mavo._("firebase-check-security-rules")):(Mavo.warn(this.mavo._("firebase-enable-auth")),Mavo.warn(this.mavo._("firebase-check-security-rules")))),this.mavo.error(`${a.message}`),null}},async login(a){return await this.ready,new Promise((b,c)=>{a?b(this.user):(firebase.auth().useDeviceLanguage(),this.app.auth().signInWithPopup(_.buildProvider(this.provider)).catch(a=>{this.mavo.error(`Firebase Auth: ${a.message}`),c(a)}))})},logout(){return this.app.auth().signOut().catch(a=>{this.mavo.error(`Firebase Auth: ${a.message}`)})},static:{test(a){return /^https:\/\/.*\.firebaseio\.com\/?/.test(a)||/^firebase:\/\/.*/.test(a)},parseSource(a,b={}){const c={};if(/^https:\/\/.*\.firebaseio\.com\/?/.test(a)){const b=new URL(a);c.project=b.hostname.split(".").shift(),a=b.pathname.slice(1)}else a=a.replace("firebase://","");if(-1<a.indexOf("/")){const d=a.split("/");c.project=c.project||d.shift(),c.filename=d.length%2?b.filename:d.pop(),c.collection=d.join("/")}else c.project=c.project||a,c.collection=b.collection,c.filename=b.filename;return c},getOptions(a,b){const c=b,d=Object.keys(b);if(a=a?.trim()){let b=a.split(/\s+/);return b=Mavo.Functions.unique(b.reverse()).reverse(),d.forEach(a=>b.includes(a)?c[a]=!0:c[a]=!1),c}return c},updatesHandler(a,b){const c=a.metadata.hasPendingWrites?"Local":"Server";if("Server"==c){const c=b.autoSave;b.autoSave=!1,b.render(a.data()),b.autoSave=c}},getAuthProviders(a,b){const c=Object.keys(b);if(a=a?.trim()){let b=a.split(/\s+/);return b=Mavo.Functions.unique(b.map(a=>a.toLowerCase())),b=b.filter(a=>c.includes(a)),b}return[]},buildProvider(provider="google"){return provider=provider.charAt(0).toUpperCase()+provider.slice(1),eval(`new firebase.auth.${provider}AuthProvider()`)}}}));Mavo.Locale.register("en",{"firebase-enable-auth":"You might need to enable authorization in your app. To do so, add mv-storage-options=\"auth\" to the Mavo root. Note: Instead of mv-storage, you can also use other backend types: mv-source, mv-init, and mv-uploads.","firebase-enable-storage":"It seems your app does not support uploads. To enable uploads, add mv-storage-options=\"storage\" to the Mavo root. Note: Instead of mv-storage, you can also use other backend types: mv-source, mv-init, and mv-uploads.","firebase-check-security-rules":"Please check the security rules for your app. They might be inappropriately set. For details, see https://plugins.mavo.io/plugin/firebase-firestore#security-rules-examples.","firebase-offline-persistence-unimplemented":"The current browser does not support all of the features required to enable offline persistence. This feature is supported only by Chrome, Safari, and Firefox web browsers.","firebase-auth-google":"Google","firebase-auth-facebook":"Facebook","firebase-auth-twitter":"Twitter","firebase-auth-github":"GitHub"})})(Bliss);